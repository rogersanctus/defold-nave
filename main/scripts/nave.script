local SPEED = 500
local LERP_FACTOR_INCREASE = {
	x = 0.00475,
	y = 0.004
}

local SPACE_SHIP_SIZE = {
	x = 176,
	y = 92
}

function init(self)
	msg.post('.', 'acquire_input_focus')

	self.input = {
		up = false,
		down = false,
		left = false,
		right = false
	}

	self.direction = {
		x = 0,
		y = 0
	}

	self.old_velocity = {
		x = 0,
		y = 0
	}

	self.lerp_factor = {
		x = 0,
		y = 0
	}
end

function final(self)
	msg.post('.', 'release_input_focus')
end

function update(self, dt)
	local position = go.get_position()

	local new_vel = {
		x = self.old_velocity.x,
		y = self.old_velocity.y
	}

	local target_vel = {
		x = self.direction.x * SPEED,
		y = self.direction.y * SPEED
	}

	-- X velocity
	if target_vel.x ~= self.old_velocity.x then
		self.lerp_factor.x = self.lerp_factor.x + LERP_FACTOR_INCREASE.x

		if self.lerp_factor.x >= 1 then
			self.lerp_factor.x = 1
		end

		local start = self.old_velocity.x
		local ending = target_vel.x
		new_vel_x = vmath.lerp(self.lerp_factor.x, start, ending)
	end

	if self.lerp_factor.x == 1 then
		self.old_velocity.x = target_vel.x
		self.lerp_factor.x = 0
	end

	-- Y velocity
	if target_vel.y ~= self.old_velocity.y then
		self.lerp_factor.y = self.lerp_factor.y + LERP_FACTOR_INCREASE.y

		if self.lerp_factor.y >= 1 then
			self.lerp_factor.y = 1
		end

		local start = self.old_velocity.y
		local ending = target_vel.y
		new_vel_y = vmath.lerp(self.lerp_factor.y, start, ending)
	end

	if self.lerp_factor.y == 1 then
		self.old_velocity.y = target_vel.y
		self.lerp_factor.y = 0
	end

	position.x = position.x + new_vel.x * dt
	position.y = position.y + new_vel.y * dt

	local anim = 'idle'

	if self.direction.x == -1 then
		anim = 'left'
	elseif self.direction.x == 1 then
		anim = 'right'
	else
		anim = 'idle'
	end

	sprite.play_flipbook('#nave', anim)

	-- Keep spacehip inside screen area
	if position.x < SPACE_SHIP_SIZE.x/2 then
		position.x = SPACE_SHIP_SIZE.x/2
		self.old_velocity.x = 0
	end

	if position.x > 960 - SPACE_SHIP_SIZE.x/2 then
		position.x = 960 - SPACE_SHIP_SIZE.x/2
		self.old_velocity.x = 0
	end

	if position.y < SPACE_SHIP_SIZE.y/2 then
		position.y = SPACE_SHIP_SIZE.y/2
		self.old_velocity.y = 0
	end

	if position.y > 640 - SPACE_SHIP_SIZE.y/2 then
		position.y = 640 - SPACE_SHIP_SIZE.y/2
		self.old_velocity.y = 0
	end

	go.set_position(position)
end

function on_input(self, action_id, action)
	if action_id == hash('up') then
		if action.released then
			self.input.up = false
		else
			self.input.up = true
		end
	end

	if action_id == hash('down') then
		if action.released then
			self.input.down = false
		else
			self.input.down = true
		end
	end

	if action_id == hash('left') then
		if action.released then
			self.input.left = false
		else
			self.input.left = true
		end
	end

	if action_id == hash('right') then
		if action.released then
			self.input.right = false
		else
			self.input.right = true
		end
	end

	if self.input.up then
		self.direction.y = 1
	elseif self.input.down then
		self.direction.y = -1
	else
		self.direction.y = 0
	end

	if self.input.left then
		self.direction.x = -1
	elseif self.input.right then
		self.direction.x = 1
	else
		self.direction.x = 0
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end